@inject IJSRuntime JsRuntime

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Timer</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-row">
                        <div class="form-group col-md-4">
                            <label for="hrs">Hrs</label>
                            <input class="form-control" id="hrs" @bind="Hours" type="number" max="99" min="0">
                        </div>
                        <div class="form-group col-md-4">
                            <label for="mins">Mins</label>
                            <input class="form-control" id="mins" @bind="Minutes" type="number" max="59" min="0">
                        </div>
                        <div class="form-group col-md-4">
                            <label for="secs">Secs</label>
                            <input class="form-control" id="secs" @bind="Seconds" type="number" max="59" min="0">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="hrs">Timer name:</label>
                            <input class="form-control" id="name" @bind="Name" type="text">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="hrs">Timer name:</label>
                            <select class="form-control selectpicker" @bind="Sound">
                                @foreach (var sound in _sounds)
                                {
                                    <option>@sound</option>
                                }
                            </select>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="Save">Save changes</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    private List<string> _sounds = new()
    {
        "piano", "strings", "bass",
        "kick", "snare", "hihat",
        "fx1", "fx2", "fx3",
    };

    [Parameter]
    public EventCallback<EditTimerDto> OnTimerChanged { get; set; }
    [Parameter]
    public int Time { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string Sound { get; set; }

    private int Hours { get; set; }
    private int Minutes { get; set; }
    private int Seconds { get; set; }

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        Hours = Time / 3600;
        Minutes = Time % 3600 / 60;
        Seconds = Time % 3600 % 60;
        StateHasChanged();
    }

    public async Task Close(bool saved = false)
    {
        if (!saved)
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "You can lose unsaved data!");
            if (!confirmed)
            {
                return;
            }
        }
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;

        StateHasChanged();
    }

    public async Task Save()
    {
        var updatedTime = Hours * 3600 + Minutes * 60 + Seconds;
        await OnTimerChanged.InvokeAsync(new EditTimerDto(Name, updatedTime, Sound));
        await Close(true);
    }

}