@inject IJSRuntime JsRuntime

<div class="mb-30">
    <div>
        <h1 class="d-inline-block align-middle">@(GetFormattedTime(Time))</h1>
        <button type="button" class="btn @(Paused ? "btn-success" : "btn-danger")" disabled="@(Time <= 0)" @onclick="OnStart">
            @(Paused ? "Start" : "Pause")
        </button>
        <button type="button" class="btn btn-primary" disabled="@(!Started || !Paused)" @onclick="OnReset">Reset</button>
    </div>
    <div>
        <p class="d-inline-block h5">
            @(TimerEntity.Name) (@(GetFormattedTime(TimerEntity.Time)))
            @if (!string.IsNullOrEmpty(TimerEntity.Sound))
            {
                <span class="oi oi-volume-high mr-2" aria-hidden="true"></span>@(TimerEntity.Sound) <span>sound</span>
            }
        </p>
        <EditTimer @ref="EditTimerModal"
                   Time="TimerEntity.Time"
                   Name="@(TimerEntity.Name)"
                   Sound="@(TimerEntity.Sound)"
                   OnTimerChanged="TimerChanged">
        </EditTimer>
        <button type="button" class="btn btn-info" disabled="@(!Paused)" @onclick="() => EditTimerModal.Open()">
            <span class="oi oi-pencil mr-2" aria-hidden="true"></span>Edit
        </button>
        <button type="button" class="btn btn-danger" disabled="@(!Paused)" @onclick="Delete">
            <span class="oi oi-trash mr-2" aria-hidden="true"></span>Delete
        </button>
    </div>
    <div>
        <SfProgressBar Type="ProgressType.Linear" Value="Time" Height="50" Width="90%" TrackColor="#9c9c9c"
                       InnerRadius="190%" ProgressColor="@(Paused? "#18A558" : "#E3165B")" TrackThickness="34"
                       CornerRadius="CornerType.Round" ProgressThickness="34" Minimum="0" Maximum="TimerEntity.Time">
        </SfProgressBar>
    </div>
</div>

@code {
    private bool Started { get; set; }
    private bool Paused { get; set; } = true;
    private EditTimer EditTimerModal { get; set; }
    private int Time { get; set; }
    private TimerWorker _timer;

    [Parameter]
    public EventCallback OnTimerDeleted { get; set; }
    [Parameter]
    public EventCallback OnTimerChanged { get; set; }
    [Parameter]
    public TimerVm TimerEntity { get; set; }

    protected override void OnInitialized()
    {
        _timer = new TimerWorker(1000);
        _timer.Elapsed += CountDownTimer;
        Time = TimerEntity.Time;
    }

    private string GetFormattedTime(int timeInSeconds)
    {
        return $"{timeInSeconds / 3600:D2}:{timeInSeconds % 3600 / 60:D2}:{timeInSeconds % 3600 % 60:D2}";
    }

    private void OnStart()
    {
        Started = true;
        Paused = !Paused;

        if (!Paused)
        {
            _timer.Start();
        }
        else
        {
            _timer.Stop();
        }
    }

    public void CountDownTimer(Object source, ElapsedEventArgs e)
    {
        if (Time > 0)
        {
            Time--;
        }
        else
        {
            _timer.Enabled = false;
            Paused = true;
            if (TimerEntity.Sound != null)
            {
                JsRuntime.InvokeVoidAsync("playaudio", $"sounds/{TimerEntity.Sound}.wav");
            }
        }
        InvokeAsync(StateHasChanged);
    }

    private void OnReset()
    {
        Started = false;
        Paused = true;
        Time = TimerEntity.Time;
    }

    private async Task TimerChanged(EditTimerDto dto)
    {
        TimerEntity.Name = dto.Name;
        TimerEntity.Time = dto.TimeInSeconds;
        TimerEntity.Sound = dto.Sound;
        OnReset();
        await OnTimerChanged.InvokeAsync();
    }

    public async Task Delete()
    {
        _timer.Dispose();
        await OnTimerDeleted.InvokeAsync();
    }
}
