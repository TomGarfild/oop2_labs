@page "/"
@page "/timer"
@inject IJSRuntime JsRuntime

<div>
    @foreach (var timer in _timers)
    {
        <div class="container">
            <div class="row">
                <div class="col"><Timer TimerEntity="@(timer)" OnTimerDeleted="() => TimerDeleted(timer)" OnTimerChanged="UpdateData"></Timer></div>
            </div>

        </div>

    }
    <button type="button" class="btn btn-primary mb-30" @onclick="AddTimer">
        <span class="oi oi-plus mr-2" aria-hidden="true"></span>Add another timer
    </button>
</div>



@code {
    private List<TimerVm> _timers = new List<TimerVm>();

    protected override async Task OnInitializedAsync()
    {
        var timersJson = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "timers");
        _timers = JsonSerializer.Deserialize<List<TimerVm>>(timersJson) ?? new List<TimerVm>();
    }

    private async Task AddTimer()
    {
        _timers.Add(new(_timers.Count, $"Timer {_timers.Count + 1}", 120, ""));
        await UpdateData();
    }

    private async Task TimerDeleted(TimerVm deleted)
    {
        _timers.Remove(deleted);
        await UpdateData();
    }

    private async Task UpdateData()
    {
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "timers", JsonSerializer.Serialize(_timers));
    }
}
